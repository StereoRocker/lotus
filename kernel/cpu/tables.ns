[GLOBAL gdt_flush]

gdt_flush:
	mov eax, [esp+4]	; Get the pointer to the GDT, passed as a parameter
	lgdt [eax]			; Load the new GDT pointer
	
	mov ax, 0x10		; 0x10 is the offset in the GDT to our data segment
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	mov ss, ax
	jmp 0x08:.flush		; 0x08 is the offset to our code segment: Far jump!
.flush:
	ret
	
[GLOBAL idt_flush]

idt_flush:
	mov eax, [esp+4]	; Get the pointer to the IDT, passed as a parameter
	lidt [eax]			; Load the IDT pointer
	ret

[GLOBAL tss_flush]

tss_flush:
	mov ax, 0x2B
	ltr ax
	ret

%macro ISR_NOERRCODE 1
	[GLOBAL isr%1]
	isr%1:
		cli
		push byte 0
		push dword %1
		jmp isr_common_stub
%endmacro

%macro ISR_ERRCODE 1
	[GLOBAL isr%1]
	isr%1:
		cli
		push dword %1
		jmp isr_common_stub
%endmacro

ISR_NOERRCODE 0
ISR_NOERRCODE 1
ISR_NOERRCODE 2
ISR_NOERRCODE 3
ISR_NOERRCODE 4
ISR_NOERRCODE 5
ISR_NOERRCODE 6
ISR_NOERRCODE 7
ISR_ERRCODE 8
ISR_NOERRCODE 9
ISR_ERRCODE 10
ISR_ERRCODE 11
ISR_ERRCODE 12
ISR_ERRCODE 13
ISR_ERRCODE 14
ISR_NOERRCODE 15
ISR_NOERRCODE 16
ISR_NOERRCODE 17
ISR_NOERRCODE 18
ISR_NOERRCODE 19
ISR_NOERRCODE 20
ISR_NOERRCODE 21
ISR_NOERRCODE 22
ISR_NOERRCODE 23
ISR_NOERRCODE 24
ISR_NOERRCODE 25
ISR_NOERRCODE 26
ISR_NOERRCODE 27
ISR_NOERRCODE 28
ISR_NOERRCODE 29
ISR_NOERRCODE 30
ISR_NOERRCODE 31

[EXTERN isr_handler]
isr_common_stub:
	pusha			; pushes edi,esi,ebp,esp,ebx,edx,ecx,eax
	
	mov ax, ds		; Lower 16 bits of eax = ds
	push eax		; Save the data segment descriptor
	
	mov ax, 0x10	; load kernel data segment
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	call isr_handler
	
	pop eax			; Reload the original data segment descriptor
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	popa			; Pops edi,esi,ebp...
	add esp, 8		; Cleans up the pushed error code and pushed ISR number
	sti
	iret			; pops 5 things at once: CS, EIP, EFLAGS, SS and ESP

%macro IRQ 2
	global irq%1
	irq%1:
		cli
		push byte 0
		push dword %2
		jmp irq_common_stub
%endmacro

IRQ  0, 32
IRQ  1, 33
IRQ  2, 34
IRQ  3, 35
IRQ  4, 36
IRQ  5, 37
IRQ  6, 38
IRQ  7, 39
IRQ  8, 40
IRQ  9, 41
IRQ 10, 42
IRQ 11, 43
IRQ 12, 44
IRQ 13, 45
IRQ 14, 46
IRQ 15, 47

[EXTERN irq_handler]

irq_common_stub:
	pusha
	
	mov ax, ds
	push eax
	
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	call irq_handler
	
	pop ebx
	mov ds, bx
	mov es, bx
	mov fs, bx
	mov gs, bx
	
	popa
	add esp, 8
	sti
	iret

%macro INT 1
	global int%1
	int%1:
		cli
		push byte 0
		push dword %1
		jmp int_common_stub
%endmacro

INT 48
INT 49
INT 50
INT 51
INT 52
INT 53
INT 54
INT 55
INT 56
INT 57
INT 58
INT 59
INT 60
INT 61
INT 62
INT 63
INT 64
INT 65
INT 66
INT 67
INT 68
INT 69
INT 70
INT 71
INT 72
INT 73
INT 74
INT 75
INT 76
INT 77
INT 78
INT 79
INT 80
INT 81
INT 82
INT 83
INT 84
INT 85
INT 86
INT 87
INT 88
INT 89
INT 90
INT 91
INT 92
INT 93
INT 94
INT 95
INT 96
INT 97
INT 98
INT 99
INT 100
INT 101
INT 102
INT 103
INT 104
INT 105
INT 106
INT 107
INT 108
INT 109
INT 110
INT 111
INT 112
INT 113
INT 114
INT 115
INT 116
INT 117
INT 118
INT 119
INT 120
INT 121
INT 122
INT 123
INT 124
INT 125
INT 126
INT 127
INT 128
INT 129
INT 130
INT 131
INT 132
INT 133
INT 134
INT 135
INT 136
INT 137
INT 138
INT 139
INT 140
INT 141
INT 142
INT 143
INT 144
INT 145
INT 146
INT 147
INT 148
INT 149
INT 150
INT 151
INT 152
INT 153
INT 154
INT 155
INT 156
INT 157
INT 158
INT 159
INT 160
INT 161
INT 162
INT 163
INT 164
INT 165
INT 166
INT 167
INT 168
INT 169
INT 170
INT 171
INT 172
INT 173
INT 174
INT 175
INT 176
INT 177
INT 178
INT 179
INT 180
INT 181
INT 182
INT 183
INT 184
INT 185
INT 186
INT 187
INT 188
INT 189
INT 190
INT 191
INT 192
INT 193
INT 194
INT 195
INT 196
INT 197
INT 198
INT 199
INT 200
INT 201
INT 202
INT 203
INT 204
INT 205
INT 206
INT 207
INT 208
INT 209
INT 210
INT 211
INT 212
INT 213
INT 214
INT 215
INT 216
INT 217
INT 218
INT 219
INT 220
INT 221
INT 222
INT 223
INT 224
INT 225
INT 226
INT 227
INT 228
INT 229
INT 230
INT 231
INT 232
INT 233
INT 234
INT 235
INT 236
INT 237
INT 238
INT 239
INT 240
INT 241
INT 242
INT 243
INT 244
INT 245
INT 246
INT 247
INT 248
INT 249
INT 250
INT 251
INT 252
INT 253
INT 254
INT 255

[EXTERN int_handler]
int_common_stub:
	pusha
	
	mov ax, ds
	push eax
	
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	call int_handler
	
	pop ebx
	mov ds, bx
	mov es, bx
	mov fs, bx
	mov gs, bx
	
	popa
	add esp, 8
	sti
	iret
